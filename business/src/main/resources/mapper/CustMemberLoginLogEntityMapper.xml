<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.nlsapi.core.business.mapper.cust.CustMemberLoginLogEntityMapper">
  <resultMap id="BaseResultMap" type="com.nlsapi.core.business.entity.MemberLoginLogEntity">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="member_id" jdbcType="BIGINT" property="memberId" />
    <result column="login_time" jdbcType="TIMESTAMP" property="loginTime" />
    <result column="token" jdbcType="VARCHAR" property="token" />
    <result column="heart_count" jdbcType="INTEGER" property="heartCount" />
    <result column="last_heart_time" jdbcType="TIMESTAMP" property="lastHeartTime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, member_id, login_time, token, heart_count, last_heart_time
  </sql>
  <select id="selectByExample" parameterType="com.nlsapi.core.business.entity.MemberLoginLogEntityExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from member_login_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from member_login_log
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from member_login_log
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.nlsapi.core.business.entity.MemberLoginLogEntityExample">
    delete from member_login_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.nlsapi.core.business.entity.MemberLoginLogEntity">
    insert into member_login_log (id, member_id, login_time,
      token, heart_count, last_heart_time
      )
    values (#{id,jdbcType=BIGINT}, #{memberId,jdbcType=BIGINT}, #{loginTime,jdbcType=TIMESTAMP},
      #{token,jdbcType=VARCHAR}, #{heartCount,jdbcType=INTEGER}, #{lastHeartTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.nlsapi.core.business.entity.MemberLoginLogEntity">
    insert into member_login_log
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="memberId != null">
        member_id,
      </if>
        login_time,
      <if test="token != null">
        token,
      </if>
      <if test="heartCount != null">
        heart_count,
      </if>
        last_heart_time,
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="memberId != null">
        #{memberId,jdbcType=BIGINT},
      </if>
      current_timestamp,
      <if test="token != null">
        #{token,jdbcType=VARCHAR},
      </if>
      <if test="heartCount != null">
        #{heartCount,jdbcType=INTEGER},
      </if>
      current_timestamp,
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.nlsapi.core.business.entity.MemberLoginLogEntityExample" resultType="java.lang.Long">
    select count(*) from member_login_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update member_login_log
    <set>
      <if test="row.id != null">
        id = #{row.id,jdbcType=BIGINT},
      </if>
      <if test="row.memberId != null">
        member_id = #{row.memberId,jdbcType=BIGINT},
      </if>
      <if test="row.loginTime != null">
        login_time = #{row.loginTime,jdbcType=TIMESTAMP},
      </if>
      <if test="row.token != null">
        token = #{row.token,jdbcType=VARCHAR},
      </if>
      <if test="row.heartCount != null">
        heart_count = #{row.heartCount,jdbcType=INTEGER},
      </if>
      <if test="row.lastHeartTime != null">
        last_heart_time = #{row.lastHeartTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="example != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update member_login_log
    set id = #{row.id,jdbcType=BIGINT},
      member_id = #{row.memberId,jdbcType=BIGINT},
      login_time = #{row.loginTime,jdbcType=TIMESTAMP},
      token = #{row.token,jdbcType=VARCHAR},
      heart_count = #{row.heartCount,jdbcType=INTEGER},
      last_heart_time = #{row.lastHeartTime,jdbcType=TIMESTAMP}
    <if test="example != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.nlsapi.core.business.entity.MemberLoginLogEntity">
    update member_login_log
    <set>
      <if test="memberId != null">
        member_id = #{memberId,jdbcType=BIGINT},
      </if>
      <if test="loginTime != null">
        login_time = #{loginTime,jdbcType=TIMESTAMP},
      </if>
      <if test="token != null">
        token = #{token,jdbcType=VARCHAR},
      </if>
      <if test="heartCount != null">
        heart_count = #{heartCount,jdbcType=INTEGER},
      </if>
      <if test="lastHeartTime != null">
        last_heart_time = #{lastHeartTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.nlsapi.core.business.entity.MemberLoginLogEntity">
    update member_login_log
    set member_id = #{memberId,jdbcType=BIGINT},
      login_time = #{loginTime,jdbcType=TIMESTAMP},
      token = #{token,jdbcType=VARCHAR},
      heart_count = #{heartCount,jdbcType=INTEGER},
      last_heart_time = #{lastHeartTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>
